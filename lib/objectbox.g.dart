// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/coin.dart';
import 'model/holding.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6444446014792710638),
      name: 'Coin',
      lastPropertyId: const obx_int.IdUid(9, 1889531293741589864),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1696720278387754550),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9175985621961376711),
            name: 'coinId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 80961279659548289),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7567578375909215418),
            name: 'symbol',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8095920031051178714),
            name: 'nameLower',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6531257355849286265),
            name: 'symbolLower',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6303093867116285672),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7965919883817501716),
            name: 'currentPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1889531293741589864),
            name: 'oldPrice',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 3278131889892222054),
      name: 'Holding',
      lastPropertyId: const obx_int.IdUid(5, 297106454535569600),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5132298923911447947),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4005682922457457871),
            name: 'coinId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2199904772926908482),
            name: 'quantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1019782086024334378),
            name: 'lastPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 297106454535569600),
            name: 'lastUpdatedEpoch',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 3278131889892222054),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Coin: obx_int.EntityDefinition<Coin>(
        model: _entities[0],
        toOneRelations: (Coin object) => [],
        toManyRelations: (Coin object) => {},
        getId: (Coin object) => object.id,
        setId: (Coin object, int id) {
          object.id = id;
        },
        objectToFB: (Coin object, fb.Builder fbb) {
          final coinIdOffset = fbb.writeString(object.coinId);
          final nameOffset = fbb.writeString(object.name);
          final symbolOffset = fbb.writeString(object.symbol);
          final nameLowerOffset = fbb.writeString(object.nameLower);
          final symbolLowerOffset = fbb.writeString(object.symbolLower);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, coinIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, symbolOffset);
          fbb.addOffset(4, nameLowerOffset);
          fbb.addOffset(5, symbolLowerOffset);
          fbb.addOffset(6, imageUrlOffset);
          fbb.addFloat64(7, object.currentPrice);
          fbb.addFloat64(8, object.oldPrice);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final coinIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final symbolParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final currentPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final oldPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final object = Coin(
              id: idParam,
              coinId: coinIdParam,
              name: nameParam,
              symbol: symbolParam,
              imageUrl: imageUrlParam,
              currentPrice: currentPriceParam,
              oldPrice: oldPriceParam)
            ..nameLower = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..symbolLower = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '');

          return object;
        }),
    Holding: obx_int.EntityDefinition<Holding>(
        model: _entities[1],
        toOneRelations: (Holding object) => [],
        toManyRelations: (Holding object) => {},
        getId: (Holding object) => object.id,
        setId: (Holding object, int id) {
          object.id = id;
        },
        objectToFB: (Holding object, fb.Builder fbb) {
          final coinIdOffset = fbb.writeString(object.coinId);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, coinIdOffset);
          fbb.addFloat64(2, object.quantity);
          fbb.addFloat64(3, object.lastPrice);
          fbb.addInt64(4, object.lastUpdatedEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final coinIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final quantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final lastPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final lastUpdatedEpochParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = Holding(
              id: idParam,
              coinId: coinIdParam,
              quantity: quantityParam,
              lastPrice: lastPriceParam,
              lastUpdatedEpoch: lastUpdatedEpochParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Coin] entity fields to define ObjectBox queries.
class Coin_ {
  /// See [Coin.id].
  static final id = obx.QueryIntegerProperty<Coin>(_entities[0].properties[0]);

  /// See [Coin.coinId].
  static final coinId =
      obx.QueryStringProperty<Coin>(_entities[0].properties[1]);

  /// See [Coin.name].
  static final name = obx.QueryStringProperty<Coin>(_entities[0].properties[2]);

  /// See [Coin.symbol].
  static final symbol =
      obx.QueryStringProperty<Coin>(_entities[0].properties[3]);

  /// See [Coin.nameLower].
  static final nameLower =
      obx.QueryStringProperty<Coin>(_entities[0].properties[4]);

  /// See [Coin.symbolLower].
  static final symbolLower =
      obx.QueryStringProperty<Coin>(_entities[0].properties[5]);

  /// See [Coin.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<Coin>(_entities[0].properties[6]);

  /// See [Coin.currentPrice].
  static final currentPrice =
      obx.QueryDoubleProperty<Coin>(_entities[0].properties[7]);

  /// See [Coin.oldPrice].
  static final oldPrice =
      obx.QueryDoubleProperty<Coin>(_entities[0].properties[8]);
}

/// [Holding] entity fields to define ObjectBox queries.
class Holding_ {
  /// See [Holding.id].
  static final id =
      obx.QueryIntegerProperty<Holding>(_entities[1].properties[0]);

  /// See [Holding.coinId].
  static final coinId =
      obx.QueryStringProperty<Holding>(_entities[1].properties[1]);

  /// See [Holding.quantity].
  static final quantity =
      obx.QueryDoubleProperty<Holding>(_entities[1].properties[2]);

  /// See [Holding.lastPrice].
  static final lastPrice =
      obx.QueryDoubleProperty<Holding>(_entities[1].properties[3]);

  /// See [Holding.lastUpdatedEpoch].
  static final lastUpdatedEpoch =
      obx.QueryIntegerProperty<Holding>(_entities[1].properties[4]);
}
